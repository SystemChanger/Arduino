#define line 0
#define rightFarSensor 550
#define rightNearSensor 50
#define rightMiddleSensor 40
#define leftMiddleSensor 50
#define leftNearSensor 50
#define leftFarSensor 300

/*------Пины двигателей------*/
int E1 = 5;
int E2 = 6;
int M1 = 4;
int M2 = 7;
/*--------------------------*/


int leftLineSensor = 0;
int middleLineSensor = 0;
int rightLineSensor = 0;

int leftWaySensor = 0;
int frontWaySensor = 0;
int rightWaySensor = 0;


char leftWay[100];
char rightWay[100];
char frontWay[100];
char lastWay[100];

int size = 0;

char direction = 'F';

int extraSpeed = 30; // 0...100

long previousMillis = 0; //for timer
long previousMillis1 = 0; //extra
long previousMillis2 = 0;
long interval = 300;

int error = 0;
int skip = 0;

void moveForward(float LEspeed, float REspeed)
{
  analogWrite (E1, LEspeed);
  digitalWrite (M1, HIGH);
  analogWrite (E2, REspeed);
  digitalWrite (M2, HIGH);
}

void moveBackward(float LEspeed, float REspeed)
{
  analogWrite (E1, LEspeed);
  digitalWrite (M1, LOW);
  analogWrite (E2, REspeed);
  digitalWrite (M2, LOW);
}

void turnLeft (float LEspeed, float REspeed)
{
  analogWrite (E1, LEspeed);
  digitalWrite (M1, LOW);
  analogWrite (E2, REspeed);
  digitalWrite (M2, HIGH);
}

void turnRight (float LEspeed, float REspeed)
{
  analogWrite (E1, LEspeed);
  digitalWrite (M1, HIGH);
  analogWrite (E2, REspeed);
  digitalWrite (M2, LOW);
}

void turnBack(float LEspeed, float REspeed)
{
  while (analogRead(3) >= leftMiddleSensor)
       turnLeft(LEspeed, REspeed);
}

void followLine()
{
  if (analogRead(A4) <= leftNearSensor)
  {
      turnLeft(0, 130 + extraSpeed);
      delay(10);
  }
  if (analogRead(3) <= leftMiddleSensor)
  {
      moveForward(80 + extraSpeed, 130 + extraSpeed);
      delay(10);
  }
  if (analogRead(A3) <= rightMiddleSensor)
  {
      moveForward(130 + extraSpeed, 80 + extraSpeed);
      delay(10);
  }
  if (analogRead(A2) <= rightNearSensor)
  {
      turnRight(130 + extraSpeed, 0);
      delay(10);
  }
}

void chooseFrontWay()
{
  Serial.println('F');
  // вручную
      
  if (digitalRead(10) == line)
      moveForward(130 + extraSpeed, 130 + extraSpeed);
  delay(400);
}

void chooseLeftWay()
{
  Serial.println('L');
  //leftWay[size] = 'C'; вручную это надо писать
      
  while (analogRead(A5) <= leftFarSensor)
      turnLeft(0, 130 + extraSpeed);
  while (analogRead(3) >= leftMiddleSensor)
      turnLeft(0, 130 + extraSpeed);
}

void chooseRightWay()
{
  Serial.println('R');
  //rightWay[size] = 'C'; вручную
      
  while (analogRead(A1) <= rightFarSensor)
      turnRight(130 + extraSpeed, 0);
  while (analogRead(A3) >= rightMiddleSensor)
      turnRight(130 + extraSpeed, 0);
}

char getSizeNumWay()
{
  if (frontWay[size] == 'C')
      return 'F';
  if (leftWay[size] == 'C')
      return 'L';
  if (rightWay[size] == 'C')
      return 'R';
      
  if (frontWay[size] != 'C' && leftWay[size] != 'C' && rightWay[size] != 'C')
      return 'N';
}

void assignSizeNumWayAsDead()
{ 
  if (frontWay[size] == 'C')
  {
    if (leftWay[size] == 'D' && rightWay[size] == 'D')
        lastWay[size] = 'F';
        
    frontWay[size] = 'D';
  }
  if (leftWay[size] == 'C')
  {
    if (frontWay[size] == 'D' && rightWay[size] == 'D')
        lastWay[size] = 'L';
    
    leftWay[size] = 'D';
  }
  if (rightWay[size] == 'C')
  {
    if (frontWay[size] == 'D' && leftWay[size] == 'D')
        lastWay[size] = 'R';
    
    rightWay[size] = 'D';
  }
}

void tryToFinishMove()
{
  if (analogRead(A3) >= rightMiddleSensor && analogRead(3) >= leftMiddleSensor && analogRead(A4) >= leftNearSensor && analogRead(A2) >= rightNearSensor && digitalRead(10) != line)
    {
      stop();
      delay(200);
      if (getSizeNumWay() == 'L')
          while (digitalRead(10) != line)
              turnLeft(0, 130 + extraSpeed);
      if (getSizeNumWay() == 'R')
          while (digitalRead(10) != line)
              turnRight(130 + extraSpeed, 0);
    }
}

void tryToCalibrate()
{
  while (analogRead(3) <= leftMiddleSensor && analogRead(A3) <= rightMiddleSensor)
  {
    if (analogRead(A5) <= leftFarSensor)
    {
        while (analogRead(A4) >= leftNearSensor)
            turnLeft(0, 130 + extraSpeed);
        delay(100);
    }
  
    if (analogRead(A4) <= leftNearSensor)
    {
        while (analogRead(3) >= leftMiddleSensor)
            turnLeft(0, 130 + extraSpeed);
        delay(100);
    }
  
  
    if (analogRead(A1) <= rightFarSensor)
    {
        while (analogRead(A2) >= rightNearSensor)
            turnRight(130 + extraSpeed, 0);
        delay(100);
    }
    if (analogRead(A2) <= rightNearSensor)
    {
        while (analogRead(A3) >= rightMiddleSensor)
            turnRight(130 + extraSpeed, 0);
        delay(100);
    }
  }
}

void checkForFinish()
{
  if (analogRead(A3) > rightMiddleSensor && analogRead(3) > leftMiddleSensor && analogRead(A4) > leftNearSensor && analogRead(A2) > rightNearSensor && analogRead(A1) > rightFarSensor && analogRead(A5) > leftFarSensor)
  {
    if (digitalRead(10) == line)
        moveForward(130 + extraSpeed, 130 + extraSpeed);
    else
        if (digitalRead(2) == line)
        { 
          moveForward(130 + extraSpeed, 130 + extraSpeed); // Insurance
          delay(200);
          
          if (digitalRead(2) == line) // Is it real finnish? You're not kidding?
            {
              Serial.println("FINISH!"); //Oh, ok.
              
              while(1)
                  stop();
            }
          else
          {
              tryToCalibrate();
              tryToFinishMove();
          }
        }
  }
}

void checkForCrosswaySkipping()
{
  previousMillis1 = millis();
  while(analogRead(A1) >= rightFarSensor && analogRead(A5) >= leftFarSensor) // проверка на "проскок"
    {
      moveBackward(70 + extraSpeed, 70 + extraSpeed);
          
      if (millis() - previousMillis1 > 1000)
      {
        stop;
        tryToCalibrate();
            
        error = 1;
        break;
      }
    }
  stop();
}

void markDeadways()
{
  if (digitalRead(10) != line)
      frontWay[size] = 'D';
  if (analogRead(A5) > leftFarSensor)
      leftWay[size] = 'D';
  if (analogRead(A1) > rightFarSensor)
      rightWay[size] = 'D';
}

void checkForCrossway()
{
  if (analogRead(A1) <= rightFarSensor || analogRead(A5) <= leftFarSensor && error == 0)
  {
    if (millis() - previousMillis >= interval)
    {
      stop();
      delay(400);
      checkForCrosswaySkipping();      
      
      digitalWrite(13, HIGH);
      
      if (direction == 'F')
      {
        size++;
        markDeadways();
    
      
        if (digitalRead(10) == line)
        {
          chooseFrontWay();
          frontWay[size] = 'C';
        }
    
        if (analogRead(A5) <= leftFarSensor && getSizeNumWay() == 'N')
        {
          chooseLeftWay();
          leftWay[size] = 'C';
        }
      
        if (analogRead(A1) <= rightFarSensor && getSizeNumWay() == 'N')
        {
          chooseRightWay();
          rightWay[size] = 'C';
        }
      }
      
      if (direction == 'B')
      {
        if (frontWay[size] == 'D' && leftWay[size] == 'D' && rightWay[size] == 'D')
        {
          if (lastWay[size] == 'F')
              chooseFrontWay();
          if (lastWay[size] == 'R')
              chooseLeftWay();
          if (lastWay[size] == 'L')
              chooseRightWay();
          
          size--;
          assignSizeNumWayAsDead();
          
          skip = 1;
        }
        
        if (skip == 0)
        {
          if (getSizeNumWay() == 'F' && direction == 'B')
          {
            if (rightWay[size] != 'D' && direction == 'B')
            {
              size++;
              chooseLeftWay();
              rightWay[size] = 'C';
              direction = 'F';
            }
            
            if (leftWay[size] != 'D' && direction == 'B')
            {
              size++;
              chooseRightWay();
              leftWay[size] = 'C';
              direction = 'F';
            }
            
          }
          
          if (getSizeNumWay() == 'L' && direction == 'B')
          {
            if (frontWay[size] != 'D' && direction == 'B')
            {
              size++;
              chooseLeftWay();
              frontWay[size] = 'C';
              direction = 'F';
            }
            
            if (rightWay[size] != 'D' && direction == 'B')
            {
              size++;
              chooseFrontWay();
              rightWay[size] = 'C';
              direction = 'F';
            }
            
          }
          
          if (getSizeNumWay() == 'R' && direction == 'B')
          {
            if (frontWay[size] != 'D' && direction == 'B')
            {
              size++;
              chooseRightWay();
              frontWay[size] = 'C';
              direction = 'F';
            }
            
            if (leftWay[size] != 'D' && direction == 'B')
            {
              size++;
              chooseFrontWay();
              leftWay[size] = 'C';
              direction = 'F';
            }
          }
            
        }
        skip = 0;
        
      }
      
    
      digitalWrite(13, LOW);
    
      tryToCalibrate();
    }
    else
    {
        tryToCalibrate();
        tryToFinishMove();
    }
    
    previousMillis = millis();
    error = 0;
 }
}

void checkForDeadEnd()
{
  if (analogRead(A3) > rightMiddleSensor && analogRead(3) > leftMiddleSensor && analogRead(A4) > leftNearSensor && analogRead(A2) > rightNearSensor && analogRead(A1) > rightFarSensor && analogRead(A5) > leftFarSensor && digitalRead(10) != line && digitalRead(2)!= line)
  {
    Serial.println("Line lost!");
    stop();
    delay(200);
    assignSizeNumWayAsDead();
    
    
    while (analogRead(3) > leftMiddleSensor && digitalRead(10) != line)
        turnLeft(120 + extraSpeed, 160 + extraSpeed);
    stop();
    delay(200);
    tryToCalibrate();
    stop();
    
    direction = 'B';
    Serial.println("Backward direction");
  }
}

void stop()
{
  digitalWrite(E1, LOW);
  digitalWrite(E2, LOW);
}



void setup() 
{
  Serial.begin(9600);
  tryToCalibrate();
}

void loop() 
{
  /*
  leftLineSensor = analogRead(A4);
  middleLeftSensor = analogRead(3);
  middleRightSensor = analogRead(A3);
  rightLineSensor = analogRead(A2);
  
  leftWaySensor = analogRead(A5);
  frontWaySensor = digitalRead(10);
  rightWaySensor = analogRead(A1);
  */
  
  //Serial.println(analogRead(A5));
  //A1 < 550
  //A2 < 50
  // 3 < 50
  //A3 < 40
  //A4 < 50
  //A5 < 200
  


  
  checkForFinish();
  followLine();
  checkForCrossway();
  checkForDeadEnd();
}
