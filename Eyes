#include <SoftwareSerial.h>
#include <URMSerial.h>
#include <Servo.h> 

/*------Пины двигателей------*/
int E1 = 5;
int E2 = 6;
int M1 = 4;
int M2 = 7;
/*--------------------------*/

/*-----------SERVO----------*/
Servo myservo;
int pos = 90;
int maxMeasurementPosition = 0;
char side = '0';
float degreesToTurn = 0;
/*--------------------------*/

/*---------ENCODERS---------*/
int rightEncoderValue = 0;
int leftEncoderValue = 0;
/*--------------------------*/

/*------------------------------------URM code--------------------------------------------*/
URMSerial urm;

int maxMeasurement = 0;
int value; // This value will be populated
int getMeasurement()
{
  // Request a distance reading from the URM37
  switch(urm.requestMeasurementOrTimeout(DISTANCE, value)) // Find out the type of request
  {
  case DISTANCE: // Double check the reading we recieve is of DISTANCE type
    //    Serial.println(value); // Fetch the distance in centimeters from the URM37
    return value;
    break;
  case TEMPERATURE:
    return value;
    break;
  case ERROR:
    Serial.println("Error");
    break;
  case NOTREADY:
    Serial.println("Not Ready");
    break;
  case TIMEOUT:
    Serial.println("Timeout");
    break;
  } 

  return -1;
}
/*----------------------------------------------------------------------------------------*/



/*-----------------------------------------------------SETUP-----------------------------------------------------*/
void setup() 
{
  Serial.begin(9600);                  // Sets the baud rate to 9600
  urm.begin(8,9,9600);                 // RX Pin, TX Pin, Baud Rate
  Serial.println("URM37 Library by Miles Burton - Distance. Version 2.0");   // Shameless plug 

  // Set servo boundaries
  myservo.attach(13);  // attaches the servo on pin 10 to the servo object 
  myservo.write(90);
  delay(500);
  
  attachInterrupt (0, leftEncoder, CHANGE);
  attachInterrupt (1, rightEncoder, CHANGE);
}
/*---------------------------------------------------------------------------------------------------------------*/


/*---------------------------------------------------FUNCTIONS---------------------------------------------------*/
void moveFront(int E1speed, int E2speed)
{
  analogWrite (E1, E1speed);
  digitalWrite (M1, HIGH);
  analogWrite (E2, E2speed);
  digitalWrite (M2, HIGH);
}

void moveBack(int E1speed, int E2speed)
{
  analogWrite (E1, E1speed);
  digitalWrite (M1, LOW);
  analogWrite (E2, E2speed);
  digitalWrite (M2, LOW);
}

void turnLeft(int E2speed)
{
  analogWrite (E2, E2speed);
  digitalWrite (M2, HIGH);
}

void turnRight(int E1speed)
{
  analogWrite (E1, E1speed);
  digitalWrite (M1, HIGH);
}

void stop()
{
  analogWrite (E1, 0);
  analogWrite (E2, 0);
}

void moveToObject()
{
  while (getMeasurement() >= 20)
  {
    moveFront(200, 200);
  } 
  stop();

  while (getMeasurement() < 15)
  {
    moveBack(100, 100);
  }
  stop();
}

void scanLeft()
{
  for (;pos < 180; pos = pos + 5)
  {
    myservo.write(pos);
    delay(20);
    if (getMeasurement() > maxMeasurement - 2)
    {
      maxMeasurement = getMeasurement();
      maxMeasurementPosition = pos;
      if (pos > 90) 
         side = 'l';
    }
  }
}

void scanRight()
{
  for (;pos > 20; pos = pos - 5)
  {
    myservo.write(pos);
    delay(20);
    if (getMeasurement() > maxMeasurement - 2)
    {
      maxMeasurement = getMeasurement();
      maxMeasurementPosition = pos;
      if (pos < 90)
         side = 'r';
    }
  }
}

void scan()
{
  myservo.attach(13);
  delay(5);

  maxMeasurement = 0;
  scanLeft();
  scanRight();

  myservo.detach();
}

void centerServo()
{
  myservo.attach(13);
  delay(5);

  myservo.write(90);
  delay(300);

  myservo.detach();
}

void degreesToTurnF()
{
  if (maxMeasurementPosition < 90)
      degreesToTurn = (float)(90 - maxMeasurementPosition) / 1.896;
  else
      degreesToTurn = (float)(maxMeasurementPosition - 90) / 1.896;
}

void turnToFarestObject()
{ 
  centerServo();
  degreesToTurnF();

  leftEncoderValue = 0;
  rightEncoderValue = 0;

  while (side == 'l' && rightEncoderValue < degreesToTurn)
  {
    turnLeft(75);
  }
  stop();

  while (side == 'r' && leftEncoderValue < degreesToTurn)
  {
    turnRight(75);
  }
  stop();
}

void moveToFarestObject()
{  
  turnToFarestObject();
  moveToObject();
}



void leftEncoder()
{
  leftEncoderValue++;
}

void rightEncoder()
{
  rightEncoderValue++;
}
/*---------------------------------------------------------------------------------------------------------------*/




/*--------------------------------------------------MAIN CYCLE---------------------------------------------------*/
void loop()
{
  scan();
  Serial.println(side);
  Serial.println(degreesToTurn);
}
/*---------------------------------------------------------------------------------------------------------------*/
