#include <SoftwareSerial.h>
#include <URMSerial.h>

/*------Пины двигателей------*/
int E1 = 5;
int E2 = 6;
int M1 = 4;
int M2 = 7;
/*--------------------------*/

/*-----------SERVO----------*/
int servo = 13;
int left = 200;
int center = 130;
int right = 75;
int pos = center;
int maxMeasurementPosition = 0;
char side = '0';
int degreesToTurn = 0;
/*--------------------------*/

/*---------ENCODERS---------*/
int rightEncoderValue = 0;
int leftEncoderValue = 0;
/*--------------------------*/

/*------------------------------------URM code--------------------------------------------*/
URMSerial urm;

int maxMeasurement = 0;
int value; // This value will be populated
int getMeasurement()
{
  // Request a distance reading from the URM37
  switch(urm.requestMeasurementOrTimeout(DISTANCE, value)) // Find out the type of request
  {
  case DISTANCE: // Double check the reading we recieve is of DISTANCE type
    //    Serial.println(value); // Fetch the distance in centimeters from the URM37
    return value;
    break;
  case TEMPERATURE:
    return value;
    break;
  case ERROR:
    maxMeasurement++;
    maxMeasurementPosition = pos;
    Serial.println("Error");
    break;
  case NOTREADY:
    Serial.println("Not Ready");
    break;
  case TIMEOUT:
    Serial.println("Timeout");
    break;
  } 

  return -1;
}
/*----------------------------------------------------------------------------------------*/


/*-----------------------------------------------------SETUP-----------------------------------------------------*/
void setup() 
{
  Serial.begin(9600);                  // Sets the baud rate to 9600
  urm.begin(8,9,9600);                 // RX Pin, TX Pin, Baud Rate
  Serial.println("URM37 Library by Miles Burton - Distance. Version 2.0");   // Shameless plug 
  
  analogWrite(servo, center);
  delay(500);
  
  attachInterrupt (0, leftEncoder, CHANGE);
  attachInterrupt (1, rightEncoder, CHANGE);
}
/*---------------------------------------------------------------------------------------------------------------*/


/*---------------------------------------------------FUNCTIONS---------------------------------------------------*/
void moveFront(int E1speed, int E2speed)
{
  analogWrite (E1, E1speed);
  digitalWrite (M1, HIGH);
  analogWrite (E2, E2speed);
  digitalWrite (M2, HIGH);
}

void moveBack(int E1speed, int E2speed)
{
  analogWrite (E1, E1speed);
  digitalWrite (M1, LOW);
  analogWrite (E2, E2speed);
  digitalWrite (M2, LOW);
}

void turnLeft(int E2speed)
{
  analogWrite (E2, E2speed);
  digitalWrite (M2, HIGH);
}

void turnRight(int E1speed)
{
  analogWrite (E1, E1speed);
  digitalWrite (M1, HIGH);
}

void stop()
{
  analogWrite (E1, 0);
  analogWrite (E2, 0);
}

void moveToObject()
{
  while (getMeasurement() >= 20 || getMeasurement() == ERROR)
  {
    moveFront(200, 200);
  } 
  stop();

  while (getMeasurement() < 15)
  {
    moveBack(100, 100);
  }
  stop();
}

void scanLeft()
{
   for(; pos < left ; pos +=5) 
   { 
     analogWrite(servo, pos);           
     delay(30);  
     
     if (getMeasurement() > maxMeasurement - 2)
     {
       maxMeasurement = getMeasurement();
       maxMeasurementPosition = pos;
       
       if (pos < 140)
         side = 'r';  
     }  
   } 
}

void scanRight()
{
   for(; pos > right; pos -=5) 
   { 
     analogWrite(servo, pos);           
     delay(30);  
     
     if (getMeasurement() > maxMeasurement - 2)
     {
       maxMeasurement = getMeasurement();
       maxMeasurementPosition = pos;
       
       if (pos > center)
         side = 'l';  
     }  
   } 
}

void scan()
{
  maxMeasurement = getMeasurement();
  maxMeasurementPosition = center;
  side = '0';
  
  scanLeft();
  scanRight();
}

void centerServo()
{
  analogWrite(servo, 140);    
  delay(500);
}

void turnToFarestObject()
{ 
  centerServo();
  
  if (side == 'l')
      degreesToTurn = (maxMeasurementPosition - 130) / 3.7 ;
      
  if (side == 'r')
      degreesToTurn = (130 - maxMeasurementPosition) / 3.7 ;

  leftEncoderValue = 0;
  rightEncoderValue = 0;
  
  
  while (getMeasurement() < 15)
  {
    moveBack(100, 100);
  }
  stop();
  
  while (side == 'l' && rightEncoderValue < degreesToTurn)
  {
    turnLeft(100);
  }
  stop();

  while (side == 'r' && leftEncoderValue < degreesToTurn)
  {
    turnRight(100);
  }
  stop();
}

void moveToFarestObject()
{  
  turnToFarestObject();
  moveToObject();
}



void leftEncoder()
{
  leftEncoderValue++;
}

void rightEncoder()
{
  rightEncoderValue++;
}
/*---------------------------------------------------------------------------------------------------------------*/




/*--------------------------------------------------MAIN CYCLE---------------------------------------------------*/
void loop()
{
  scan();
  moveToFarestObject();
}
/*---------------------------------------------------------------------------------------------------------------*/
